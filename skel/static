#!/usr/bin/env python3
# This file has the function definitions for the tool
# to work, don't mess here unless you know what you're
# doing!

import sys, multiprocessing, webbrowser, subprocess
from argparse import ArgumentParser, Namespace
from stutils import print_shutdown
from builder import site_build, check_dirs
from static_server import (
    ADDRESS,
    PORT,
    serve
    )

# Build the whole site, this performs the directory checks,
# generate the piece of HTML blocks form 'pages' dir,
# lastly it sticks together the pages with the templates
def build_site():
    # Directory check and build
    print("Checking directories...")
    error = check_dirs()

    # Batch process
    if error:
        print("Please, set up your files before building the site!")
        return
    else:
        success = site_build()
        if success:
            print("Site built successfully, check the 'dist' folder")
        else:
            print("There were some errors...")


# Starts a thread with the development server started on 'dist' folder
# and opens the browser in the direction set in 'static_server'.
# If the 'dist' files doesn't exists, it calls build_site
def run_dev():
    _daemon = multiprocessing.Process(
        target=serve,
        name="static-server",
        daemon=True
    )

    try:
        _daemon.start()
    
        print(f'''Running web server...
                \rALERT: this is a development server, don't use it for production!
                \r---------------
                \rListening on port {PORT}

                \rOpen your browser in: http://{ADDRESS}:{PORT}
                \rHit CTRL+C to close the server.
            ''')

        while True:
            cli = str(input("[DEBUGâš¡] > "))

            match cli.lower():
                case 'rebuild':
                    print("Rebuilding...")
                    subprocess.call(["python3", "builder.py"])

                case 'exit':
                    _daemon.terminate()
                    while _daemon.is_alive():
                        print_shutdown()
                    print("\n")
                    sys.exit(0)
                case 'status':
                    print(f'''Process {_daemon.name}:
                        \rIs alive: {_daemon.is_alive()}.
                        \rIs daemon: {_daemon.daemon}.
                        \rPID: {_daemon.pid}.
                    ''')
                case _:
                    print(f"{cli} is not recognized as a command.")
    except KeyboardInterrupt:
        _daemon.terminate()
        while _daemon.is_alive():
            print_shutdown()
        print("\n")
        sys.exit(0)
    

# CLI Prototype
if __name__ == "__main__":
    parser = ArgumentParser(
        prog="Static",
        usage="static <options>",
        description="Static site generator"
    )
    parser.add_argument(
        "command",
        choices=["check","build","run"],
        help='''Pass 'check' or 'build' arguments.\n
        \rcheck - Checks if the project structure is correct, it generates the directories in case they're not.
        \rbuild - Builds the site and places it into 'dist' folder. Check implied.
        \rrun - Serves dist folder of the project, if the site is not built it calls build command.''')

    args: Namespace = parser.parse_args()

    match args.command:
        case "build":
            build_site()
        case "check":
            check_dirs()
            print("Check done")
        case "run":
            run_dev()
