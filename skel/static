#!/usr/bin/env python3
# This file has the function definitions for the tool
# to work, don't mess here unless you know what you're
# doing!

import sys, multiprocessing, webbrowser, subprocess, time
from argparse import ArgumentParser, Namespace
from static_lib.stutils import print_shutdown, exists, is_empty
from builder import site_build, check_dirs
from static_lib import registry
from static_server import (
    ADDRESS,
    PORT,
    serve,
    print_server
    )

# Build the whole site, this performs the directory checks,
# generate the piece of HTML blocks form 'pages' dir,
# lastly it sticks together the pages with the templates
def build_site():
    # Directory check and build
    print("Checking directories...")
    error = check_dirs()

    # Batch process
    if error:
        print("Please, set up your files before building the site!")
        return
    else:
        success = site_build()
        if success:
            print("Site built successfully, check the 'dist' folder")
        else:
            print("There were some errors...")


# region Services
# Services implemented by the interface of static tool
def watch():
    try:
        tstamp = registry.Timestamp(".")
        tstamp.update_times()
        while True:
            if tstamp.compare_times():
                print("Rebuilding...")
                subprocess.call(["python3", "builder.py"])
                tstamp.update_times()
            time.sleep(5)
    except KeyboardInterrupt:
        print("\rWatcher stopped")

def run_dev():
    _server_daemon = multiprocessing.Process(
        target=serve,
        args=[True],
        name="static_server",
        daemon=True
    )

    try:
        _server_daemon.start()
    
        print_server(ADDRESS, PORT)
        
        if not exists("dist") or is_empty("dist"):
            print("No dist made, building...")
            subprocess.call(["python3", "builder.py"])

        webbrowser.open_new_tab(f"http://{ADDRESS}:{PORT}")

        print('''
            \rEntering interactive console mode
            \r--------------------
            \rCommands:
            \rrebuild - Once you have made changes in your files you might rebuild them and press F5 in the browser.
            \rstatus - Shows the status of the server.
            \rbrowser - Reopens the browser tab.
            \rexit - Shutdown the session.
            ''')

        while True:
            cli = str(input("[DEBUGâš¡] > "))

            match cli.lower():
                case 'rebuild':
                    print("Rebuilding...")
                    subprocess.call(["python3", "builder.py"])
                case 'browser':
                    webbrowser.open_new_tab(f"http://{ADDRESS}:{PORT}")
                case 'exit':
                    _server_daemon.terminate()
                    while _server_daemon.is_alive():
                        print_shutdown()
                    print("\n")
                    sys.exit(0)
                case 'status':
                    print(f'''Process {_server_daemon.name}:
                        \rIs alive: {_server_daemon.is_alive()}.
                        \rIs daemon: {_server_daemon.daemon}.
                        \rPID: {_server_daemon.pid}.
                    ''')
                case _:
                    print(f"{cli} is not recognized as a command.")
    except KeyboardInterrupt:
        _server_daemon.terminate()
        print("\n")
        while _server_daemon.is_alive():
            print_shutdown()
        print("\n")
        sys.exit(0)
# endregion

def static_server():
    _watch_daemon = multiprocessing.Process(
        target=watch,
        name="static_watch",
        daemon=True
    )

    try:
        _watch_daemon.start()

        print_server(ADDRESS, PORT)
        serve(False)
    except KeyboardInterrupt:
        while _watch_daemon.is_alive():
            print_shutdown()
            sys.exit(0)

# endregion
    

# CLI Prototype
if __name__ == "__main__":
    parser = ArgumentParser(
        prog="Static",
        usage="static <options>",
        description="Static site generator"
    )
    parser.add_argument(
        "command",
        choices=["check","build","run"],
        help='''Pass 'check' or 'build' arguments.\n
        \rcheck - Checks if the project structure is correct, it generates the directories in case they're not.
        \rbuild - Builds the site and places it into 'dist' folder. Check implied.
        \rrun - Serves dist folder of the project, if the site is not built it calls build command.''')
    
    parser.add_argument(
        '-i',
        '--interactive',
        action='store_true',
        help="Sets interactive mode. Manual mode"
    )

    args: Namespace = parser.parse_args()

    match args.command:
        case "build":
            build_site()
        case "check":
            check_dirs()
            print("Check done")
        case "run":
            if args.interactive:
                pass
            else:
                static_server()
